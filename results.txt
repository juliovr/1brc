baseline:
real    6m7.250s
user    2m13.236s
sys     0m13.056s


remove stream:
try (FileReader fileReader = new FileReader(FILE);
        BufferedReader reader = new BufferedReader(fileReader)) {

    String line;
    while ((line = reader.readLine()) != null) {
        Measurement m = new Measurement(line.split(";"));
        MeasurementAggregator aggregator = aggregators.get(m.station);
        if (aggregator == null) {
            aggregator = new MeasurementAggregator();
            aggregators.put(m.station, aggregator);
        }

        aggregator.min = Math.min(aggregator.min, m.value);
        aggregator.max = Math.max(aggregator.max, m.value);
        aggregator.sum += m.value;
        aggregator.count++;
    }
}

for (Map.Entry<String, MeasurementAggregator> entry : aggregators.entrySet()) {
    String station = entry.getKey();
    MeasurementAggregator agg = entry.getValue();

    result.put(station, new ResultRow(agg.min, agg.sum / agg.count, agg.max));
}

System.out.println(result);

real    5m47.384s
user    2m4.887s
sys     0m11.186s



Just counting lines
New method: split the chunks by the next new line, meaning the new lines and semicolons does not appear in different threads.
nThreads = 1:
    Cold:
        Time elapsed = 7 seconds
        Time elapsed = 7405898600 nanoseconds
    Normal:
        Time elapsed = 7 seconds
        Time elapsed = 7307333700 nanoseconds

nThreads = 2:
    Normal:
        Time elapsed = 3 seconds
        Time elapsed = 3971195200 nanoseconds

nThreads = 20 (available cores)
    Normal:
        Time elapsed = 0 seconds
        Time elapsed = 941629000 nanoseconds



Processing the results:
    baseline:
        Time elapsed = 125 seconds
        Time elapsed = 125501872100 nanoseconds
    mine:
        Time elapsed = 6 seconds
        Time elapsed = 6503361800 nanoseconds
